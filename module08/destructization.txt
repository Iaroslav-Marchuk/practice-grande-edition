Деструктуризація (Destructuring) — це особливий синтаксис, що дозволяє витягти значення зі структур даних, такі як об'єкти або масиви, і присвоїти їх змінним.
Це зручний спосіб дістати потрібні дані зі складних структур і використовувати їх у коді.

Без деструктуризації робота з властивостями об'єкта має такий вигляд:
    const user = { 
        name: "Jacob", 
        age: 32 
    };

    console.log(user.name); // Jacob
    console.log(user.age); // 3

    Із деструктуризацією робота з властивостями об'єкта має такий вигляд:
    const user = { 
        name: "Jacob", 
        age: 32 
    };

    const { name, age } = user;
    console.log(name); // Jacob
    console.log(age); // 32

Після ключового слова const або let ставимо фігурні дужки, як і у випадку з оголошенням об'єкта.
Усередині дужок, через кому, вказуємо імена змінних, яким будуть задані відповідні значення властивостей деструктуризованого об’єкта.
    Деструктуризація завжди знаходиться в лівій частині операції присвоювання.
    Змінним усередині фігурних дужок присвоюються значення однойменних властивостей об'єкта з відповідними іменами.
    Послідовність оголошення змінних у фігурних дужках не важлива.


Деструктуризація неіснуючих властивостей
У випадку, якщо ім'я змінної та ім'я властивості збігаються, то відбувається присвоєння.
Коли в об'єкті немає властивості з таким ім'ям, змінній буде присвоєно undefined.
З метою уникнення присвоєння undefined під час деструктуризації неіснуючих властивостей, можна задати змінним значення за замовчуванням, використовуючи знак =.
Це значення буде присвоєно тільки у випадку, коли в об'єкті відсутня властивість із таким ім'ям.
    const {
    title,
    author,
    coverImage = "https://via.placeholder.com/640/480"
    } = book;


Перейменування змінної
Під час деструктуризації можна перейменувати змінну, в яку розпаковується значення властивості, використовуючи :.
    const { title, author: bookAuthor, isPublic, rating: bookRating } = book;
Для цього пишемо:
    ім'я властивості, з якої хочемо отримати значення
    ставимо двокрапку :
    пишемо ім'я змінної, в яку необхідно помістити значення цієї властивості.


Значення за замовчуванням
При перейменуванні змінної, в яку ми розпаковуємо значення властивості об'єкта, також можна присвоїти значення за замовчуванням.
Для цього після нового імені ставимо дорівнює = і вказуємо її значення за замовчуванням.
    const {
    title,
    coverImage: bookCoverImage = "https://via.placeholder.com/640/480",
    } = book;


Деструктуризація в циклах
Під час ітерації по масиву об'єктів циклом for...of відбуваються багаторазові звернення до властивостей об'єкта.
    const books = [
    {
        title: "The Last Kingdom",
        author: "Bernard Cornwell",
        rating: 8.38,
    },
    {
        title: "Beside Still Waters",
        author: "Robert Sheckley",
        rating: 8.51,
    },
    ];

    for (const book of books) {
    console.log(book.title);
    console.log(book.author);
    console.log(book.rating);
    }
Для того щоб скоротити кількість повторень, можна деструктуризувати властивості об'єкта в локальні змінні в тілі циклу.
    for (const book of books) {
    const { title, author, rating } = book;

    console.log(title);
    console.log(author);
    console.log(rating);
    }
Якщо об'єкт містить небагато властивостей, деструктуризацію можна виконати безпосередньо в місці оголошення змінної book.
    for (const { title, author, rating } of books) {
    console.log(title);
    console.log(author);
    console.log(rating);
    }


Деструктуризація параметрів
Під час передачі об'єктів у функції, можна деструктуризувати об'єкти, щоб отримати доступ до потрібних даних. Це дає змогу явно вказати, які поля об'єкта використовуються у функції.
Без деструктуризації об'єкта:
    function printUserInfo(user) {
    console.log(`Name: ${user.name}, Age: ${user.age}, Hobby: ${user.hobby}`);
    }
    printUserInfo({ 
        name: "Alice", 
        age: 25, 
        hobby: "dancing" 
    }); // Name: Alice, Age: 25, Hobby: dancing

З деструктуризацією об'єкта в тілі функції:
    function printUserInfo(user) {
    const { name, age, hobby } = user
    console.log(`Name: ${name}, Age: ${age}, Hobby: ${hobby}`);
    }
    printUserInfo({ 
        name: "Alice", 
        age: 25, 
        hobby: "dancing" 
    }); // Name: Alice, Age: 25, Hobby: dancing

Із деструктуризацією об'єкта в місці оголошення параметрів:
    function printUserInfo({ name, age, hobby }) {
    console.log(`Name: ${name}, Age: ${age}, Hobby: ${hobby}`);
    }
    printUserInfo({ 
        name: "Alice", 
        age: 25, 
        hobby: "dancing" 
    }); // Name: Alice, Age: 25, Hobby: dancing


Глибока деструктуризація
Найчастіше дані будуть представлені об'єктами з більш ніж одним рівнем вкладеності.
Для деструктуризації властивостей вкладених об'єктів використовуються ті самі принципи. Для початку напишемо код деструктуризації властивостей об'єкта користувача.
Тепер додамо глибоку деструктуризацію властивостей об'єкта.
Для цього в деструктуризації після імені властивості ставимо двокрапку : та починаємо деструктуризацію об'єкта для цієї властивості.
    const {
    name,
    tag,
    stats: { followers, views, likes },
    } = user;


Деструктуризація масивів
Деструктуризоване присвоювання можна використовувати не тільки для обєктів, а й для масивів, але з деякими особливостями.
    Замість фігурних дужок {} використовуються квадратні [].
    Змінним, зазначеним у квадратних дужках [], будуть послідовно присвоюватися значення елементів масиву.
Після ключового слова const або let ставимо квадратні дужки, як і у випадку з оголошенням масиву.
Всередині дужок, через кому, вказуємо імена змінних, у які будуть поміщені значення відповідних елементів масиву.


Значення за замовчуванням
Якщо змінних оголошено більше, ніж елементів масиву, їм буде присвоєно undefined. Щоб запобігти цьому, можна вказувати значення за замовчуванням.
Синтаксис такий самий, як в об'єктах, після імені змінної ставимо = і значення за замовчуванням.


Часткова деструктуризація
Іноді з масиву необхідно деструктуризувати тільки перші N елементів, а інші зберегти в одну змінну у вигляді масиву.
Деструктуризуючи масив, можна розпакувати перші необхідні елементи і присвоїти іншу частину елементів масиву змінній, використовуючи операцію ...rest.
    const [ red, ...otherColors ] = color;
При цьому оригінальний масив не змінюється.
З об'єктами, до речі, це теж працює. Можна деструктуризувати певні властивості в окремі змінні, а решту зібрати в новий об'єкт.
    const { name, isOnline, ...otherProps } = user;


Пропуск значень
На відміну від іменованих властивостей об'єкта, елементи масиву — це набір індексованих значень. Якщо необхідно деструктуризувати тільки, наприклад, третій елемент, перші два необхідно пропустити
Для цього в деструктуризації необхідно відокремити комами елементи, що пропускаються.
    const [, , blue] = rgb;
На практиці в масивах ця можливість рідко використовується, але знати, що так можна робити, зайвим не буде.


Переваги деструктуризації
    Зручне вилучення значень з об'єктів і масивів: Замість того, щоб щоразу звертатися до полів об'єкта або елементів масиву за їхніми індексами або іменами, можна одразу витягти потрібні значення у змінні.
    Короткий і читабельний код: Деструктуризація робить код коротшим і зрозумілішим.
Замість довгих виразів доступу до полів об'єктів або елементів масиву, можна відразу присвоїти значення змінним зі зрозумілими іменами.
    Параметри функцій: При передачі об'єктів у функції, можна деструктуризувати об'єкти, щоб отримати доступ до потрібних даних. Це дозволяє явно вказати, які поля об'єкта використовуються у функції.
    Робота з функціями, що повертають об'єкти: Якщо функція повертає об'єкт, можна відразу деструктуризувати цей об'єкт, щоб витягти з нього значення.