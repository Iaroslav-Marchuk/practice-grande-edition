Стрілочні функції: синтаксис
Стрілочні функції (сленг — “стрілки”) мають скорочений, лаконічніший синтаксис, що зменшує обсяг коду, особливо коли функція маленька або якщо вона використовується як колбек.
    // Звичайне оголошення функції
    function classicAdd(a, b, c) {
    return a + b + c;
    }

    // Те саме стрілочною функцією
    const arrowAdd = (a, b, c) => {
    return a + b + c;
    };

    Ключове слово function не використовується
    Одразу зазначається оголошення параметрів
    Після параметрів використовується символ => і тіло функції у фігурних дужках
Якщо параметрів декілька, то вони перераховуються через кому в круглих дужках, між знаками рівності = і стрілкою =>.
Якщо параметр один, його можна оголошувати без круглих дужок.
    const add = a => {
    return a + 5;
    };
Якщо параметри відсутні, то обов'язково повинні бути порожні круглі дужки.
    const greet = () => {
    console.log("Hello!");
    };


Неявне повернення
У стрілочної функції після символу => знаходиться її тіло. Існує два способи запису: з фігурними дужками і без них.
Запис із фігурними дужками
Якщо є фігурні дужки і функція повинна повертати якесь значення, необхідно явно поставити return. Це називається явне повернення (explicit return).
    const add = (a, b, c) => {
    console.log(a, b, c);
    return a + b + c;
    };
Такий синтаксис використовується в тому випадку, якщо в тілі функції потрібно виконати ще якісь інструкції, окрім повернення значення.

Запис без фігурних дужок
Якщо фігурні дужки відсутні, то повертається результат виразу, який стоїть після =>. Це називається неявне повернення (implicit return).
    const add = (a, b, c) => a + b + c;


Псевдомасив arguments
У стрілочних функцій немає локальної змінної arguments, що містить усі аргументи. Якщо необхідно зібрати всі аргументи в масив, використовується операція rest.
    const add = (...args) => {
    console.log(args);
    };
    add(1, 2, 3); // [1, 2, 3]


Колбеки
Анонімні стрілочні функції відмінно підходять для колбеків перебираючих методів масиву завдяки коротшому синтаксису оголошення, особливо якщо код у тілі функції не громіздкий.
    const numbers = [5, 10, 15, 20, 25];

    // Звичайна анонімна функція
    numbers.forEach(function (number, index) {
    console.log(`Index ${index}, value ${number}`);
    });

    // Стрілочна анонімна функція
    numbers.forEach((number, index) => {
    console.log(`Index ${index}, value ${number}`);
    });

Стрілочну колбек-функцію також можна оголошувати окремо й передавати на неї посилання. Це варто робити, якщо одна функція використовується в декількох місцях програми або якщо вона громіздка.
    const numbers = [5, 10, 15, 20, 25];

    const logMessage = (number, index) => {
    console.log(`Index ${index}, value ${number}`);
    };

    numbers.forEach(logMessage);