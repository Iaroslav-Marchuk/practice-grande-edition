Метод forEach(callback)
Метод forEach(callback) — це метод перебирання масиву, який використовується для заміни циклів for і for...of в роботі з колекцією.
    array.forEach(function callback(element, index, array) {
    // Тіло колбек-функції
    });

    Поелементно перебирає масив array
    Викликає колбек-функцію для кожного елемента масиву
    Повертає undefined, навіть якщо явно задати вираз після return


Метод map()
Метод map(callback) використовується для трансформації масиву.
Він викликає колбек-функцію для кожного елемента вихідного масиву, а результат її роботи записує в новий масив, який і буде результатом виконання методу.
    array.map((element, index, array) => {
    // Тіло колбек-функції
    });

    Поелементно перебирає оригінальний масив
    Не змінює оригінальний масив
    Результат роботи колбек-функції записується в новий масив
    Повертає новий масив такої ж довжини, як і в масиву, до якого він був застосований
Використовуючи метод map(), можна перебрати масив об'єктів, і в колбек-функції повернути значення властивості кожного з них.


Метод flatMap()
Метод flatMap(callback) аналогічний методу map(), але застосовується у випадках, коли результат — це багатовимірний масив, який необхідно «розгладити».
    array.flatMap((element, index, array) => {
    // Тіло колбек-функції
    });


Метод filter()
Метод filter(callback) використовується для єдиної операції — фільтрації масиву. Під фільтрацією масиву мається на увазі відбір усіх елементів з колекції за певним критерієм.
    array.filter((element, index, array) => {
    // Тіло колбек-функції
    });
    
    Не змінює оригінальний масив.
    Поелементно перебирає оригінальний масив.
    Повертає новий масив.
    Додає в масив, що повертається, елементи, які задовольняють умову колбек-функції.
    Якщо колбек повернув true, елемент додається в масив, що повертається.
    Якщо колбек повернув false, елемент не додається в масив, що повертається.
    Якщо жоден елемент не задовольнив умову, повертає порожній масив.

Метод filter() на масиві об'єктів
Під час роботи з масивом об'єктів виконується фільтрація за значенням певної властивості. У підсумку утворюється новий масив відфільтрованих об'єктів.


Метод find()
Метод find(callback) дозволяє знайти і повернути перший відповідний елемент, що задовольняє умову, після чого перебирання масиву припиняється.
Тобто він, на відміну від методу filter(callback), шукає до першого збігу.
    array.find((element, index, array) => {
    // Тіло колбек-функції
    });

    Не змінює оригінальний масив
    Поелементно перебирає оригінальний масив
    Повертає перший елемент, що задовольняє умову, тобто коли колбек повертає true
    Якщо жоден елемент не задовольнив умову, тобто для всіх елементів колбек повернув false, метод повертає undefined

Метод every()
Метод every(callback) перевіряє, чи задовольняють усі елементи умову колбек-функції.
    array.every((element, index, array) => {
    // Тіло колбек-функції
    });

    Не змінює оригінальний масив
    Поелементно перебирає оригінальний масив
    Повертає true, якщо всі елементи масиву задовольняють умову
    Повертає false, якщо хоча б один елемент масиву не задовольняє умову
    Перебирання масиву припиняється, якщо колбек повертає false


Метод some()
Метод some(callback) перевіряє, чи задовольняє хоча б один елемент умову колбек-функції.
    array.some((element, index, array) => {
    // Тіло колбек-функції
    });

    Не змінює оригінальний масив
    Поелементно перебирає оригінальний масив
    Повертає true, якщо хоча б один елемент масиву задовольняє умову
    Повертає false, якщо жоден елемент масиву не задовольняє умову
    Перебирання масиву припиняється, якщо колбек повертає true


Метод reduce()
Метод reduce(callback, initialValue) використовується для послідовної обробки кожного елемента масиву із збереженням проміжного результату.
Трохи складніший за інші методи для засвоєння, але результат вартий того.
    array.reduce((previousValue, element, index, array) => {
    // Тіло колбек-функції
    }, initialValue);

    Не змінює оригінальний масив
    Поелементно перебирає оригінальний масив
    Повертає все, що завгодно (об’єкт, масив, рядок, число тощо)
    Може замінити функціонал будь-якого іншого перебираючого методу масиву та навіть їх комбінацію

Метод reduce() очікує 2 параметри:
1-й параметр (обов’язковий) — колбек-функція, яка "опрацьовує" кожен елемент масиву;
2-й параметр (не обов’язковий) — initialValue початкове значення акумулятора.

Колбек-функція з параметра редьюса очікує в свою чергу чотири параметри.
Ці параметри, так само як і в колбеках інших перебираючих методів масиву, можна не оголошувати, якщо вони вам не потрібні, але не можна порушувати їх послідовність:
1-й параметр (previousValue) — це акумулятор, тобто проміжний результат. Значення, яке поверне колбек-функція на поточній ітерації, буде значенням цього параметра на наступній ітерації;
2-й параметр — поточний елемент масиву;
3-й параметр — індекс поточної ітерації;
4-й параметр — посилання на вихідний масив.


Метод reduce() і масив об'єктів
Під час роботи з масивом об'єктів виконується редукування за значенням певної властивості. 


Метод toSorted()
Метод toSorted() сортує елементи масиву.
    array.toSorted();

    Сортує вихідний масив
    Повертає новий масив
    За замовчуванням сортує за зростанням

Свій порядок сортування чисел
    array.toSorted((a, b) => {
    // Callback function body
    });

Сортування за зростанням
Якщо виклик compareFunction(a, b) повертає будь-яке негативне значення, тобто a менше b, сортування поставить a перед b.
    const ascendingScores = scores.toSorted((a, b) => a - b);

Сортування за спаданням
Якщо виклик compareFunction(a, b) повертає будь-яке позитивне значення, тобто b більше a, сортування поставить b перед a.
    const descendingScores = scores.toSorted((a, b) => b - a);


Свій порядок сортування рядків
Для сортування рядків в алфавітному порядку, за зростанням або спаданням, використовується метод рядків localeCompare().
    firstString.localeCompare(secondString)
    Повертає негативне значення, якщо firstString повинен бути перед secondString
    Повертає позитивне значення, якщо firstString повинен бути після secondString
    Якщо рядки однакові, повертається нуль і їх послідовність по відношенню один до одного не змінюється

const inAlphabetOrder = students.toSorted((a, b) => a.localeCompare(b));
const inReversedOrder = students.toSorted((a, b) => b.localeCompare(a));