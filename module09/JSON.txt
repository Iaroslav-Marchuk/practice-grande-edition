Стандарт JSON
JSON (JavaScript Object Notation) — сучасний текстовий формат зберігання й передачі структурованих даних у текстовій формі.
Саме в цьому форматі дані будуть приходити і відправлятися на сервер, зберігатися в локальному сховищі тощо.
Звичайний об'єктоподібний синтаксис JSON дуже зручний. Але JSON — це не об'єкт, а його рядкове відображення.

Синтаксис схожий на об'єкт, за винятком того, що:
    Ключі — це завжди рядки, обов'язково в подвійних лапках.
    Значення рядків — також обов'язково в подвійних лапках.
    Числа можуть бути цілими або десятковими, з десятковою крапкою або без неї, включаючи негативні.
    Числа та булеві значення true і false записуються так само, як у JavaScript.
    У JSON немає коми після останньої властивості об'єкта.
    Значення властивостей може бути спеціальним значенням null, але не може бути undefined.
    Функції не можна зберігати у JSON, оскільки JSON передбачений лише для даних, а не для методів обробки даних.


Перетворення у json
Метод JSON.stringify(value) приймає значення і перетворює його у JSON. Значенням може бути число, буль, null, масив, об'єкт. 
Рядки — це вже валідний JSON, тому в їх перетворенні немає сенсу.
Результат виклику JSON.stringify — це валідний JSON (рядок), який може бути збережений у вебсховище, базу даних або переданий мережею на сервер.


Перетворення функцій
Не всі JavaScript об'єкти можуть бути перетворені один в один у JSON. Наприклад, якщо в об'єкта є методи, то при перетворенні вони будуть проігноровані та не потраплять у JSON.
Також при спробі перетворити функцію у JSON результатом буде undefined.


Парсинг із json
Щоб отримати з JSON валідне JavaScript значення, його необхідно розпарсити (parse). Це операція зворотня перетворенню JavaScript об'єкта в json за допомогою методу JSON.stringify(value)
Метод JSON.parse(value) приймає json, тобто рядок, і перетворює його у JavaScript дані. 
Якщо json описує складний тип даних, наприклад об'єкт, то в результаті отримаємо валідний об'єкт, з яким можна працювати звичайним чином.


Обробка помилок
Якщо методу JSON.parse передати невалідний JSON, він згенерує помилку. Як результат, увесь скрипт впаде, тобто припинить своє виконання, і весь код після місця помилки не виконається.
До такого сценарію призведе, наприклад, парсинг рядка.
Рядок із символами — це невалідний JSON, адже він не може бути перетворений у валідне JavaScript значення.
Помилка буде і при спробі парсингу невалідного обєкта, який, наприклад, може прийти з бекенду.


Рішення
Для уникнення цього використовується конструкція try...catch, яка дозволяє «ловити» й обробляти помилки виконання скрипта.
    try {
    // Code that may throw a runtime error
    } catch (error) {
    // Error handling
    }
    Спочатку виконується код всередині блоку try.
    Якщо помилки відсутні, блок catch ігнорується й управління передається далі.
    Якщо в блоці try сталася помилка, його виконання зупиняється та інтерпретатор переходить до блоку catch.
Використовуючи конструкцію try...catch, можна обробити цей виняток таким чином, щоб скрипт за межами цієї конструкції продовжив працювати, навіть у разі помилки.
Змінна error — це об'єкт помилки з інформацією про те, що сталося.
У цього об'єкта є кілька корисних властивостей:
    name — тип помилки. Для помилки парсингу — це SyntaxError.
    message — повідомлення про деталі помилки.
    stack — стек викликів функцій на момент помилки. Використовується для налагодження.