Вебсховище — це механізм у веббраузерах, який дозволяє вебдодаткам зберігати та отримувати дані на стороні клієнта, тобто на комп'ютері користувача.
Щоразу, коли ти змінюєш тему кольорів між світлою і темною, переглядаєш відео, додаєш товар у кошик, відкриваєш або закриваєш сайдбар, популярні вебзастосунки можуть запам'ятовувати стан інтерфейсу і в наступному відвідуванні відновлювати його.
Вебсховище не зберігає паролі, номери банківських карт та іншу конфіденційну інформацію. Якщо шкідливий скрипт отримає доступ до вебсторінки, він без проблем зможе прочитати ці дані.
Вебсховище складається з локального сховища та сховища сеансів.

    Локальне сховище (Local Storage): унікальне для кожного вебдодатку і буде однаковим на кількох вкладках, де вебдодаток відкритий.
Дані в локальному сховищі не видаляються, навіть після закриття браузера або вимкнення комп'ютера. Щоб їх видалити, потрібно використовувати JavaScript.
Доступ до даних у локальному сховищі можливий з будь-якої вкладки або вікна браузера, пов'язаної з доменом, який створив дані.
    Сховище сесії (Session Storage): на відміну від локального сховища, дані у сховищі сесії зберігаються лише протягом одної сесії браузера.
Якщо користувач закриє вкладку або браузер, дані будуть видалені. Сховище сесії зручне для зберігання тимчасових даних або станів, які не повинні зберігатися довгий час.


Доступ до локального сховища можна отримати в об’єкті window:
    console.log(window.localStorage);
    // Storage {length: 0}


Додавання даних
Давай додамо пару ключ-значення до локального сховища за допомогою методу setItem(key, value), доступного в обєкті localStorage:
    localStorage.setItem("ui-theme", "light");
Це встановить новий запис у сховищі з ключем "ui-theme" і значенням "light". 
А що як у сховищі вже існував запис із ключем "ui-theme"? Виклик методу setItem(key, value) перезапише його значення.


Додавання складних даних
У вебсховище не записують методи об'єктів або функції, тільки дані, які підтримує JSON формат.
Технічно у вебсховище можна записати тільки рядки. Але це не проблема, якщо використовувати методи класу JSON для перетворення складних типів.
Якщо необхідно зберегти щось, окрім рядка, наприклад, масив або об'єкт, необхідно перетворити їх у рядок методом JSON.stringify().


Отримання даних
Метод getItem(key) дозволяє зчитати зі сховища запис із ключем key і повертає його значення у JSON форматі.
Якщо у сховищі відсутній запис з таким ключем, метод повертає null.
Якщо значення є примітивним типом, немає потреби його парсити.
В іншому випадку, якщо це масив або об'єкт, необхідно розпарсити значення методом JSON.parse(), щоб отримати валідні дані.


Видалення даних
Метод removeItem(key) видаляє зі сховища існуючий запис з ключем key. В результаті своєї роботи він не повертає значення.
Якщо ти хочеш повністю очистити сховище, потрібно викликати метод clear().
Операція повного очищення сховища є ризикованою. Вона може порушити записи, створені іншими розробниками проєкту.
Краще видаляти лише ті записи, які дійсно не потрібні, не покладаючись на повну очистку даних сховища.


Сховище сесії
Сховище сесії зберігає дані лише доти, поки відкрита вкладка браузера.
Це означає, що кожного разу, коли відкривається нова вкладка або нове вікно браузера, створюється нове сховище сесії.
Отже, будь-які дані, які зберігаються в сховищі сесії, автоматично видаляються, коли користувач закриває цю вкладку/вікно.
Набір методів та їхній функціонал ідентичні методам роботи з локальним сховищем.
Єдиний виняток — звертаємося до них через об'єкт sessionStorage, а не localStorage.

Методом setItem(key, value) можна записувати як рядки, так і складні типи даних.

Методом getItem(key) можна читати записи, використовуючи збережений ключ.

І звісно, видаляти елементи за ключем і очищати сховище цілком методами removeItem(key) і clear() відповідно.