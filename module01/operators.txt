typeof
використовується для визначення типу даних значення або виразу.
Результатом оператора typeof буде рядок, який вказує тип даних.

!!! typeof для перевірки типу значення null повертає рядок object !!!


Арифметичні операції
Оператор (+) використовується для складання двох чисел.
Оператор (-) використовується для віднімання одного числа від іншого.
Оператор (*) використовується для множення двох чисел.
Оператор (/) використовується для ділення одного числа на інше.
Оператор (%) повертає остачу від ділення одного числа на інше.
Оператор (**) використовується для піднесення числа до степеня.


Комбіновані оператори
Додавання: +=. Приклад: x += y еквівалентно x = x + y
Віднімання: -=. Приклад: x -= y еквівалентно x = x - y
Множення: *=. Приклад: x *= y еквівалентно x = x * y
Ділення: /=. Приклад: x /= y еквівалентно x = x / y
Остача від ділення: %=. Приклад: x %= y еквівалентно x = x % y


Оператори порівняння
Оператори порівняння використовуються для порівняння двох значень і повертають булеве значення (true або false) залежно від результату порівняння.
Оператор > (більше) — повертає true, якщо лівий операнд більше правого. В іншому разі повертає false .
Оператор < (менше) — повертає true, якщо лівий операнд менше правого. В іншому разі повертає false .
Оператор >= (більше або дорівнює) — повертає true, якщо лівий операнд більше або дорівнює правому. Якщо навпаки, повертає false .
Оператор <= (менше або дорівнює) — повертає true, якщо лівий операнд менше або дорівнює правому. Якщо навпаки, повертає false .


Оператори рівності
Оператори несуворої рівності:
Оператор == (дорівнює) — порівнює два значення на рівність і повертає true, якщо значення операндів рівні. Якщо навпаки, повертає false
Оператор != (не дорівнює) — порівнює два значення на нерівність і повертає true, якщо значення операндів не рівні. Якщо навпаки, повертає false

!!! Оператори несуворої рівності можуть приводити значення до різних типів, в залежності від контексту порівняння. Це може призвести до неочікуваних результатів !!!

рекомендується використовувати оператори суворої рівності, які не виконують перетворення типів операндів.
Оператор === (сувора рівність) — порівнює два значення на рівність, повертає true, якщо значення операндів рівні та мають однаковий тип даних. В іншому випадку, повертає false
Оператор !== (сувора нерівність) — порівнює два значення на нерівність, повертає true, якщо значення операндів не рівні або мають різні типи даних. В іншому випадку, повертає false


Перетворення типів: числа
Для явного перетворення будь-якого значення в число можна використовувати вбудовану функцію Number(), яка повертає результат у вигляді числа.
При перетворенні до числа:
    true завжди приводиться до 1;
    false , null і "" завжди приводяться до 0.
Якщо неможливо привести значення до числа, результатом перетворення буде спеціальне значення NaN (Not a Number).

Арифметичні операції (+, -, *, /) виконують неявне перетворення типів.
console.log("5" * 2); // 10
console.log("10" - 5); // 5
console.log(5 + true); // 6
console.log(5 - true); // 4
    Якщо у виразі присутній хоча б один із операндів з типом рядка, то обидва операнди приводяться до чисел.
    Це відбувається у всіх арифметичних операціях, окрім додавання. Пам’ятай, що + біля рядкових операндів викликає їх з'єднання (конкатинацію).
    Для всіх інших типів операндів та операцій виконується перетворення операндів до числа.
У разі використання операторів порівняння (<, >, <=, >=) також виконується неявне перетворення типів. Якщо операнди різних типів, то перед порівнянням вони приводяться до числа.
console.log("10" > 5); // true
console.log(10 > "5"); // true
console.log(5 > true); // true
console.log(5 < true); // false
console.log("5" < true); // false


Перетворення рядків у числа
Метод Number.parseInt() приймає 2 аргументи:
    Рядок. Якщо аргумент не є рядком, то він буде спочатку перетворений у рядок
    Система числення, до якої відноситься рядок (не обов’язковий аргумент, за замовчуванням десяткова система). Наприклад, для десяткової системи буде 10, для шістнадцяткової - 16 тощо..
Метод аналізує рядок зліва направо, видаляючи пробіли на початку і перетворюючи допустимі символи у число до тих пір, поки не зіткнеться з першим недопустимим символом.
Після цього аналіз припиняється, і вже перетворене ціле число повертається.
console.log(Number.parseInt("5")); // 5
console.log(Number.parseInt("5.5")); // 5
console.log(Number.parseInt("5cm")); // 5
console.log(Number.parseInt("12qwe74")); // 12
console.log(Number.parseInt("12.46qwe79")); // 12
console.log(Number.parseInt("cm5")); // NaN
console.log(Number.parseInt("")); // NaN
console.log(Number.parseInt("qweqwe")); // NaN

Метод Number.parseFloat() аналогічний Number.parseInt() з однієї відмінністю: перетворює рядок на число з плаваючою крапкою.
console.log(Number.parseFloat("5")); // 5
console.log(Number.parseFloat("5.5")); // 5.5
console.log(Number.parseFloat("3.14")); // 3.14
console.log(Number.parseFloat("5cm")); // 5
console.log(Number.parseFloat("5.5cm")); // 5.5
console.log(Number.parseFloat("12qwe74")); // 12
console.log(Number.parseFloat("12.46qwe79")); // 12.46
console.log(Number.parseFloat("cm5")); // NaN
console.log(Number.parseFloat("")); // NaN
console.log(Number.parseFloat("qweqwe")); // NaN


Арифметичні функції
Клас Math є вбудованим класом JavaScript. Цей клас надає набір методів для виконання математичних операцій та роботи з числами.
Ось кілька найбільш корисних методів, які надає клас Math:
    Math.floor(num): повертає найближче ціле число, яке є меншим або дорівнює вказаному числу num.
    Math.ceil(num): повертає найближче ціле число, яке є більшим, або дорівнює зазначеному числу num.
    Math.round(num): повертає значення числа після округлення до найближчого цілого.
Округлення відбувається за математичними правилами, якщо десяткова частина числа менша 0.5, то округлення буде в меншу сторону, якщо 0.5 і більше — то в більшу.
    Math.max(num1, num2, ...): повертає найбільше число з набору переданих чисел.
    Math.min(num1, num2, ...): повертає найменше число з набору переданих чисел.
    Math.random(): повертає випадкове число в діапазоні від 0 (включно) до 1 (за винятком).

Метод toFixed() повертає рядок, що представляє число із зазначеною кількістю знаків після крапки.