Оголошення функції
  function doStuff() {
    // Тіло функції
  }


Параметри та аргументи
У круглих дужках після імені функції вказуються параметри. Параметри є перерахуванням даних, які очікує функція під час виклику.
Під час виклику функції в круглих дужках можна передати аргументи, які є значеннями для оголошених параметрів функції.


Повернення значення
Оператор return використовується для повернення значення з тіла функції назад у код, у місце її виклику.
Коли інтерпретатор зустрічає оператор return, він негайно виходить із функції (припиняє її виконання) і повертає вказане після return значення в місце виклику функції.
Якщо в тілі функції відсутній оператор return або він не вказує на конкретне значення, функція поверне спеціальне значення undefined.
При використанні оператора return всі інструкції, які йдуть на рядках після нього, в тілі функції не виконуються, оскільки виконання функції припиняється відразу після зустрічі оператора return.


Область видимості функції
Змінні або функції, оголошені поза будь-якими блоками коду — тобто в глобальній області видимості, будуть доступні в будь-якій частині коду. Вони є глобальними змінними.
Будь-яка конструкція, що використовує фігурні дужки {} (умови, цикли, функції тощо) створює нову локальну область видимості.
Змінні, оголошені в локальній області видимості, можуть бути використані тільки всередині цього блоку коду.


Функціональний вираз
Функціональний вираз (function expression) — звичайне оголошення змінної, значенням якої буде функція. Це альтернативний спосіб оголошення функції.
Синтаксис оголошення функції (function declaration):
  function multiply(x, y, z) {
    console.log(x * y * z);
  }

Синтаксис функціонального виразу (function expression):
  const multiply = function (x, y, z) {
    console.log(x * y * z);
  };

Різниця в тому, що функціональний вираз (function expression) не можна викликати до місця його створення, тільки після, тому що це буквально оголошення const змінної.
A оголошення функції (function declaration) можна викликати до місця її створення в коді.