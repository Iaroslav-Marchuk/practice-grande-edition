Об'єктна модель документа (Document Object Model) — незалежний інтерфейс для роботи з HTML-документом. Ця модель містить набір властивостей і методів,
що дозволяють шукати, створювати й видаляти елементи, реагувати на дії користувача і багато іншого, тобто поєднує сторінку з мовою програмування.

DOM — це відображення HTML-документа. Виглядає як деревоподібна структура, у якій кожен вузол — це JavaScript-об'єкт із властивостями та методами,
що становить частину HTML-документа. Кожен елемент у документі, весь документ в цілому, заголовок, посилання, абзац — це частини DOM цього документа, тому всі вони можуть бути змінені з JavaScript-коду.

Об'єктна модель браузера (Browser Object Model) — незалежний від мови інтерфейс для роботи з браузером. Містить набір властивостей і методів,
що дозволяють отримати доступ до ряду функцій браузера. Саме завдяки BOM можна отримувати розміри вікна браузера, читати URL, працювати з історією навігації, місцем розташування тощо.


Пошук елементів
    element.querySelector(selector)
Використовується, якщо необхідно знайти тільки один, найчастіше унікальний елемент.
    Повертає перший знайдений елемент усередині element, що відповідає рядку CSS-селектора selector. Навіть якщо їх декілька, завжди повернеться посилання тільки на перший елемент у DOM-дереві.
    Якщо нічого не знайдено, то поверне null

    element.querySelectorAll(selector)
Використовується, якщо необхідно знайти колекцію елементів, тобто отримати масив посилань на елементи з однаковим селектором. Наприклад, усі елементи списку з класом list-item.
    Повертає псевдомасив усіх елементів всередині element, які відповідають CSS-селектору selector
    Якщо нічого не знайдено, поверне порожній масив


Властивість textContent
Властивість textContent повертає весь текстовий контент усередині елементів (власних і вкладених елементів).
Властивість textContent можна як читати, так і змінювати. Неважливо, що буде передано в textContent, дані завжди будуть записані як текст.


Властивість classList
Для того щоб із JavaScript коду прочитати, додати, видалити або перевірити наявність CSS-класу в елемента, у властивості classList зберігається об'єкт із методами для роботи з CSS-класами елемента.
Властивість classList — це спеціальний тип обєкта, який подібний до масиву. Зверни увагу, що він схожий, але не є нативним JavaScript-масивом, який ми вивчали раніше.
Він зберігає в собі весь перелік класів DOM-елемента, властивість length і властивість value.
    властивість value містить точне значення атрибута class
    властивість length — кількість класів в елемента
Але самі по собі value та length майже не використовуються, тому що для операцій з класами (додавання, видалення тощо) є спеціальні методи.


Метод classList.contains(className)
Метод очікує аргументом рядок з іменем класу та повертає true або false, залежно від наявності класу className в елемента.
Зверни увагу, що className передаємо як рядок без крапки (без селектора класу).


Метод classList.add(className)
Метод очікує аргументом рядок з іменем класу та додає клас className до списку класів елемента. Можна додавати більше одного класу, вказавши кілька аргументів через кому.


Метод classList.remove(className)
Метод очікує аргументом рядок з іменем класу та видаляє клас className зі списку класів елемента.
Якщо спробувати видалити клас, якого не існує на елементі, то це не викличе помилку. Просто нічого не видалиться.


Метод classList.toggle(className)
Метод працює як перемикач:
    якщо клас className відсутній, то додає його в кінець списку класів
    і навпаки, якщо клас className присутній — видаляє його


Метод classList.replace(oldClassName, newClassName)
Метод очікує 2 аргументи рядка (перший — стара назва класу, другий — нова назва класу) та замінює існуючий клас oldClassName на вказаний newClassName.
Якщо спробувати поміняти клас, якого не існує на елементі, то це не викличе помилку. Просто нічого не поміняється.


Властивість style
Властивість style використовується для читання та зміни вбудованих стилів з DOM-елементів. Вона повертає об'єкт, який містить список лише всіх вбудованих властивостей елемента, а не увесь CSS.
Під час запису властивості вони записуються в camelCase нотації, замість дефісів, які зазвичай використовуються в CSS, тобто background-color перетворюється на backgroundColor.
Властивість style використовується для додавання будь-яких динамічних стилів, наприклад, якщо посилання на фонове зображення невідомо заздалегідь і приходить з бекенда.


Доступ до атрибутів
DOM-елементам відповідають HTML-теги, які містять текстові атрибути.
Доступ до атрибутів здійснюється за допомогою стандартних методів. Ці методи працюють зі значенням, яке знаходиться в HTML.

Метод element.hasAttribute(nameAttribute)
Метод приймає один аргумент — рядок nameAttribute, який містить імя атрибута для перевірки та повертає результат перевірки його наявності на елементі element — true чи false.

Метод element.getAttribute(nameAttribute)
Метод отримує один аргумент — рядок nameAttribute з іменем атрибута, і повертає значення цього атрибута для вказаного HTML-елемента element. Якщо атрибут не знайдено, метод повертає null.

Метод element.setAttribute(nameAttribute, value)
Метод приймає два аргументи: рядок nameAttribute з іменем атрибута, який потрібно встановити або змінити, та value зі значенням, яке цьому атрибуту треба присвоїти.
Метод встановлює або змінює значення зазначеного атрибута для вказаного HTML-елемента element.

Метод element.removeAttribute(nameAttribute)
Метод приймає один аргумент — рядок nameAttribute з іменем атрибута, який потрібно видалити зі вказаного HTML-елемента element — та видаляє його.
Якщо зазначеного атрибута немає на елементі, метод не викликає жодних помилок та не робить нічого.
Отримати доступ або змінити значення деяких атрибутів елемента можна безпосередньо, звернувшись до них як до властивостей DOM-об'єкта. Це буде менш затратно за кількістю коду.
А ось видалити або перевірити наявність буде зручніше, використовуючи відповідний метод.


Власні атрибути
Отримання значень
Для отримання значення data-атрибута використовується властивість dataset, після якої через крапку пишеться ім'я атрибута без data-.
Тобто data- відкидається, а інша частина імені записується як ім'я властивості об'єкта.

Зміна значень
Змінити значення існуючого data-атрибута або додати новий можна так само, як і будь-якої іншої властивості об'єкта в JavaScript.
Щоб це зробити, треба отримати доступ до DOM-елемента, а потім змінити/задати значення властивості в об'єкті dataset.
    // Змінюємо значення data-action для кнопки saveBtn
    saveBtn.dataset.action = "update";


Створення елементів
    document.createElement(tagName)
    створює елемент з ім'ям tagName і повертає посилання на його обєкт як результат свого виконання.
    tagName — це рядок, що вказує тип елемента, який створюється.
    Елемент створюється в пам'яті, у DOM його ще немає.


Додавання елементів
Щоб створений елемент відображався на сторінці, його необхідно додати до вже існуючого елемента в DOM-дереві. Припустимо, що додаємо до певного елемента elem, для цього існують такі методи.
    elem.append(el1, el2, ...) — додає один або декілька елементів після всіх дітей елемента elem.
    elem.prepend(el1, el2, ...) — додає один або декілька елементів перед усіма дітьми елемента elem.
Зверни увагу! Якщо елемент для додавання вже знаходиться в DOM, то він видаляється зі свого старого місця й додається у нове.
Отже, є правило: один і той самий елемент не може бути одночасно у двох місцях.


Видалення елементів
Для того щоб видалити елемент, використовується метод element.remove().
Він викликається на елементі element, який необхідно видалити.
    const text = document.querySelector(".text")
    text.remove();


Властивість innerHTML
Читання
Властивість innerHTML зберігає вміст елемента, включно з тегами, у вигляді рядка. Значення, що повертається, — це завжди валідний HTML-код.

Зміна
Властивість innerHTML доступна і для читання, і для запису. Якщо записати в неї рядок з HTML-тегами, то браузер під час парсингу рядка перетворить його у валідні елементи і додасть у DOM-дерево.
Якщо у властивість innerHTML записати порожній рядок, то вміст елемента буде очищено. Це простий і швидкий спосіб видалення всього вмісту.

Використовуй властивість element.innerHTML для додавання тільки у разі, 
— коли елемент element порожній або
— якщо потрібно повністю замінити вміст element


Метод insertAdjacentHTML()
Метод insertAdjacentHTML() — це сучасний метод для додавання рядка з HTML-тегами перед, після або всередину елемента.
Він вирішує проблему innerHTML з повторною серіалізацією вмісту елемента під час додавання розмітки до вже існуючої.
    element.insertAdjacentHTML(position, string)
Аргумент position — це рядок, який визначає позицію щодо елемента element. Він приймає одне з чотирьох значень.
    "beforebegin" — перед element
    "afterbegin" — всередині element, перед усіма дітьми
    "beforeend" — всередині element, після усіх дітей
    "afterend" — після element


Події
Метод addEventListener()
Слухач події — це механізм, який "слухає" або "очікує" на виникнення певної події. Метод addEventListener() додає слухача події на елемент.
    element.addEventListener(event, handler, options)
Аргументи методу:
    event — рядок, що містить ім'я події, наприклад, "click"
    handler — колбек-функція, яка буде викликана під час настання події
    options — необов'язковий об'єкт параметрів із розширеними налаштуваннями
На одному елементі може бути будь-яка кількість обробників подій, навіть подій одного типу. Колбек-функції будуть викликатися в порядку їхньої реєстрації в коді.


Метод removeEventListener()
Метод removeEventListener() видаляє слухача події з елемента.
Аргументи аналогічні методу addEventListener():
    element.removeEventListener(event, handler, options)


Об'єкт події
Кожна подія — це об'єкт, який містить інформацію про деталі події та автоматично передається першим аргументом в обробник події. Усі події відбуваються з базового класу Event.
Деякі властивості об'єкта події:
    event.type — тип події.
    event.currentTarget — елемент, на якому виконується обробник події.


Події клавіатури
Існує дві основні події клавіатури:
    keydown — подія, що відбувається при натисканні клавіші
    keyup — подія, що відбувається, коли клавішу відпустили
На відміну від інших подій, події клавіатури обробляються на документі, а не на конкретному елементі. Об'єкти подій клавіатури походять від базового класу KeyboardEvent.
Події keydown і keyup спрацьовують при натисканні будь-якої клавіші, включно зі службовими (Ctrl, ShiftAltEscape тощо).
На практиці переважно обробляють тільки подію keydown, оскільки вона відбувається швидше за keyup і користувач раніше бачить результат натискання.


Властивості key і code
Властивість об’єкта події key повертає символ, згенерований натисканням клавіші на клавіатурі. Ця властивість враховує:
    стан клавіш-модифікаторів, наприклад Shift
    поточну мову
Властивість об’єкта події code повертає код фізичної клавіші на клавіатурі й не залежить від мови та стану клавіш-модифікаторів.


Події елементів форм

Подія submit
Відправлення форми відбувається:
    при кліку на кнопку з атрибутом type="submit"
Або
    при натисканні клавіші Enter під час перебування в будь-якому її текстовому полі форми
Подія submit відбувається безпосередньо на формі (тег form), тому обробник подій слід встановлювати саме на ній.

Деякі події викликають дію браузера, вбудовану за замовчуванням як реакція на певний тип події.
Наприклад, клік на посиланні ініціює перехід на нову адресу, зазначену в href, а відправлення форми перезавантажує сторінку.
Найчастіше ця поведінка небажана і її необхідно скасувати. Для скасування дії браузера за замовчуванням в об'єкта події є стандартний метод preventDefault().


Подія change
Подія change відбувається після зміни елемента форми.
Для текстових полів або textarea подія відбудеться не на кожному введенні символу, а після втрати фокусу.
Це не завжди зручно. Уяви, що користувач набирає щось у текстовому полі — подія відсутня. Щойно фокус пропав, відбудеться подія change.
Для інших елементів, наприклад, select, чекбоксів і радіокнопок, подія change спрацьовує відразу під час вибору значення.


Подія input
Подія input відбувається тільки на текстових полях і textarea.
Вона створюється щоразу при зміні значення елемента, не чекаючи втрати фокусу. На практиці input — це найголовніша подія для роботи з текстовими полями форми.

Подія input:
    відбувається при кожній зміні значення (при введенні або видаленні)
    не залежить від втрати фокусу
Подія change:
    відбувається після втрати фокусу за умови, що відбулася зміна значення в елементі


Подія focus і blur
Елемент отримує фокус під час кліку миші або переходу клавішею Tab.
Момент отримання і втрати фокусу дуже важливий. Отримуючи фокус, ми можемо завантажити дані для автозаповнення, почати відстежувати зміни тощо.
Під час втрати фокусу — перевірити введені дані.
    подія focus відбувається під час фокусування на елементі
    подія blur відбувається при втраті фокусу, наприклад, користувач клікає в іншому місці екрана
Активувати або скасувати фокус можна програмно. Для цього треба викликати в коді для елемента однойменні методи focus() і blur().




Підсумкова пам'ятка

Пошук DOM-елементів

    element.querySelector(selector) - повертає перший елемент, який відповідає вказаному CSS селектору всередині елемента element.
    element.querySelectorAll(selector) - повертає всі елементи, які відповідають вказаному CSS селектору всередині елемента element.


Властивості DOM-елемента

    element.textContent - містить текстовий вміст елемента element, ігноруючи всі теги HTML всередині.
    element.innerHTML - містить HTML-вміст елемента element.
    element.style - об'єкт, що містить вбудовані стилі елемента element, які можна змінювати динамічно з JavaScript.


CSS класи на DOM-елементах

    element.classList.contains(className) - перевіряє, чи міститься вказаний клас className на елементі element.
    element.classList.add(className) - додає клас className до списку класів елемента element.
    element.classList.remove(className) - видаляє клас className зі списку класів елемента element.
    element.classList.toggle(className) - додає клас className, якщо його немає, або видаляє, якщо він вже присутній, на елементі element.
    element.classList.replace(oldClassName, newClassName) - замінює клас oldClassName на newClassName в списку класів елемента element.


Створення та видалення DOM-елементів

    document.createElement(tagName) - створює новий HTML-елемент з вказаним ім'ям тегу tagName.
    element.append(el) - додає вміст (або елемент) до кінця списку дочірніх елементів element.
    element.prepend(el) - додає вміст (або елемент) до початку списку дочірніх елементів element.
    element.remove() - видаляє DOM-елемент з DOM дерева.
    insertAdjacentHTML(position, string) - додає вказаний рядок HTML після, перед, всередині або перед вказаним елементом.


Події

    element.addEventListener(event, handler) - додає обробник події handler для події event на елемент element.
    element.removeEventListener(event, handler) - видаляє обробник події handler для події event на елементі element.
    keydown - подія, яка виникає, коли клавіша на клавіатурі натиснута.
    submit - подія, яка виникає при відправці форми.
    change - подія, яка виникає при зміні значення елемента форми.
    input - подія, яка виникає при введенні даних в текстове поле.
    focus - подія, яка виникає, коли елемент отримує фокус.
    blur - подія, яка виникає, коли елемент втрачає фокус.







