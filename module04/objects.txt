Створення об'єкта
Об'єкти дозволяють описати та згрупувати характеристики об'єктів реального світу, наприклад, користувач, книга, продукт магазину — чого завгодно.
Об'єкти ще називають словниками, тобто вони містять терміни (властивості) та їх визначення (значення).
    Для оголошення об’єкта використовуються фігурні дужки {} — літерал об'єкта.
    При створенні об'єкта до нього відразу можна додати властивості, але це не обов’язково. Кожна властивість обов’язково складається з пари ключ: значення.
    Ключ також називають ім'ям властивості і це зазвичай рядок.
    Значенням властивості можуть бути будь-які типи: примітиви, масиви, об'єкти, булі, функції тощо.
    Властивості між собою розділяються комою.


Вкладені властивості
Значенням властивості може бути інший об'єкт.
Це використовується для зберігання вкладених і згрупованих даних.


Доступ до властивостей через крапку
Перший спосіб отримати доступ до властивості об'єкта — це синтаксис objectName.key.
    На місце звернення буде повернуте значення властивості з таким ключем.
    Якщо в об'єкті відсутня властивість з таким ключем, на місце звернення повернеться undefined.
Здебільшого синтаксис «через крапку» використовується тоді, коли ми заздалегідь знаємо ім'я (ключ) властивості, до якої хочемо отримати доступ.


Доступ до вкладених властивостей
Для доступу до вкладених властивостей використовується ланцюжок звернень «через крапку». Значення властивості — це вкладений об’єкт. Тобто «крапка» вказує наступну вкладеність.


Значення властивості — це масив.
Якщо значення властивості — це масив, то в нашому прикладі вище звернення до цього масиву буде: ****user.hobbies. Отримати доступ до елементів масиву можна через квадратні дужки та індекс: user.hobbies[0];


Доступ до властивостей через квадратні дужки
Другий спосіб отримати доступ до властивості об'єкта — це синтаксис objectName[”key”].
Схоже на звернення до елемента масиву з відмінністю. Відмінність полягає в тому, що в квадратних дужках зазначається не індекс елемента, а рядок з ключем (ім’ям властивості).
Синтаксис «квадратних дужок» використовується значно рідше. Як правило, у випадках, коли ім'я властивості заздалегідь не відоме або воно зберігається у змінній, наприклад, як значення параметра функції.
    На місце звернення буде повернуто значення властивості з таким ім'ям.
    Якщо в об'єкті відсутня властивість з таким ім'ям, на місце звернення повернеться undefined.


Зміна значення властивостей
Після того як об'єкт створений, значення його властивостей можна змінити.
Для цього необхідно звернутися до них за ключем, наприклад, «через крапку», і присвоїти нове значення.


Додавання властивостей
Операція додавання нової властивості після створення об'єкта нічим не відрізняється від зміни значення вже існуючої властивості.
Якщо під час запису значення за ключем така властивість відсутня в об'єкті, вона буде створена.


Короткі властивості
Іноді під час створення об'єкта значення властивості необхідно взяти зі змінної або параметра функції з таким самим ім'ям, як і сама властивість.
Синтаксис у наступному прикладі занадто громіздкий, адже доводиться дублювати ім'я властивості та ім'я змінної, в якій зберігається необхідне значення: name: name, і age: age,.
Синтаксис коротких властивостей (shorthand properties) вирішує цю проблему, дозволяючи використовувати ім'я змінної як ім'я властивості, а її значення як значення властивості.
    const name = "Henry Sibola";
    const age = 25;

    const user = {
    name,
    age,
    };
Тобто під час оголошення об'єкта достатньо вказати тільки ім'я властивості, а значення буде взято зі змінної з аналогічним ім'ям.


Обчислювальні властивості
Бувають ситуації, коли під час оголошення об'єкта необхідно додати властивість з ім'ям, яке ми заздалегідь не знаємо, тому що воно зберігається як значення змінної або як результат виконання функції.
Раніше для цього необхідно було спочатку створити об'єкт, а потім додавати властивості через квадратні дужки, що не зовсім зручно.
    const propName = "name";
    const user = {
    age: 25,
    };
    user[propName] = "Henry Sibola";
    console.log(user.name); // "Henry Sibola"

Синтаксис обчислювальних властивостей (computed properties) допомагає уникнути зайвого коду і в деяких випадках спростити його.
Значенням обчислювальної властивості може бути будь-який валідний вираз.
    const propName = "name";
    const user = {
    age: 25,
    // ключ цієї властивості буде взято зі значення змінної propName
    [propName]: "Henry Sibola",
    };
    console.log(user.name); // "Henry Sibola"