Перебір об'єкта
Цикл for...in
На відміну від масиву або рядка, об'єкт — це не ітерабельна сутність, тобто його не можна перебрати циклами for або for...of.
Для перебирання об'єктів використовується спеціальний цикл for...in, який перебирає ключі об'єкта object.
    for (key in object) {
    // інструкції
    }
Змінна key доступна тільки в тілі циклу.
На кожній ітерації в неї буде записано значення ключа (ім'я) властивості.
Для того щоб отримати значення властивості з таким ключем (ім'ям), використовується синтаксис квадратних дужок.


Метод Object.keys()
Вбудований клас Object має кілька корисних методів для роботи з об'єктами.
Перший з них — це Object.keys(object), який приймає об'єкт і повертає масив ключів його властивостей. Якщо в об'єкті немає властивостей, метод поверне порожній масив.
Скомбінувавши результат Object.keys() і цикл for...of, можна зручно перебрати властивості об'єкта, не вдаючись до використання циклу for...in.


Метод Object.values()
Якщо метод Object.keys(object) повертає масив імен властивостей об'єкта (тобто ключі), то метод Object.values(object) повертає масив значень його властивостей.
Якщо в об'єкті відсутні властивості, метод Object.values(object) поверне порожній масив.
Масив значень властивостей також можна перебрати циклом for...of, наприклад для отримання загальної суми числових значень.


Масив об’єктів
Для перебору такого масиву використовується стандартний цикл for...of.
Значення властивостей кожного об'єкта можна отримати, використовуючи синтаксис «через крапку», оскільки в кожному об'єкті набір властивостей та їх імена будуть однакові, відрізнятимуться тільки значення.


Пошук об'єкта за значенням властивості
Стандартне завдання під час роботи з масивом об'єктів — це пошук об'єкта за значенням властивості. Для цього необхідно:
    перебрати масив у циклі;
    додати умову, виконання якої означатиме успішний результат пошуку.


Колекція значень властивості
Типова задача під час роботи з колекцією об'єктів — це отримання масиву всіх значень певної властивості об'єктів.
Для цього необхідно:
    Створити новий порожній масив для зберігання значень властивостей.
    Перебрати масив об'єктів у циклі.
    На кожній ітерації додати в новий масив значення необхідної властивості.


Доступ до властивостей об'єкта
Методи використовуються для роботи з властивостями об'єкта та їх змінних.
Для доступу до об'єкта в методі використовується не ім'я змінної цього об’єкта, а ключове слово this.
Ключове слово this — це контекст виконання функції.
Значенням this буде посилання на об'єкт перед «крапкою», тобто об'єкт, який викликав цей метод.
Для доступу до властивостей об'єкта в методах звертаємось до нього через this і далі, стандартно, «через крапку» до властивостей.


Залишкові параметри
Ми вже знаємо, що викликати функцію можна з будь-якою кількістю аргументів незалежно від того, як її було визначено. Зайві аргументи не викличуть помилку.
Починаючи зі стандарту ES6, з'явилася концепція залишкових параметрів (...rest). Це спеціальний синтаксис, який дозволяє зібрати групу незалежних елементів у масив.
    function multiply(...args) {
    console.log(args);
    }


Збір частини аргументів
Операція (...rest) також дозволяє зібрати в масив тільки ту частину аргументів, яка необхідна.
Для цього потрібно оголосити параметри до «збирання». Можна покласти перші кілька параметрів у змінні, а решту — зібрати в масив.
Операція rest збирає решту всіх аргументів, а тому повинна завжди бути останньою в підписі функції, інакше виникне помилка SyntaxError: Rest parameter must be last formal parameter.
    function multiply(first, second, ...args) {
    console.log(first, second, args);
    }

Інколи потрібно зробити протилежне — передати масив поелементно у функцію, яка викликається.
Тут доцільно використати оператор розпилення ...spread.
Він схожий на залишкові параметри — теж використовує ..., але робить абсолютно протилежне. Коли функціонал ...spread використовується при виклику функції, він перетворює масив на список аргументів.


Створення масиву


Операція ...spread дозволяє створити копію масиву або «склеїти» довільну кількість масивів в один новий.
Досі для цього використовувалися методи slice() і concat(), але операція розпилення дозволяє зробити те саме в коротшій формі


Створення об'єкта
Операція spread дозволяє розпилити властивості довільної кількості об'єктів в один новий.